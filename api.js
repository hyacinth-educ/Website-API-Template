// This file contains the scripts related to API


// Created using https://retool.com/api-generator/
// You can start with 1 row (blank API). Make sure to add your needed columns
const api_url = "https://retoolapi.dev/BQL3Z7/data";

initialise_data();
if (window.location.pathname !== '\checkout.html') {
  get_api(api_url);
}


async function initialise_data() {
  // Our basis for checking whether our API url is newly generated is if it has an item with ID 1 (the dummy data generated by the tool)

  // Storing response
  const response = await fetch(api_url);

  // Storing data in form of JSON
  var data = await response.json();

  var has_dummy_data = data.some(function(item){ return item.id == 1});

  if(has_dummy_data) {
    for (var item of data_setup) {
      console.log(item)
      await fetch(api_url, {
        method: "POST",
        body: JSON.stringify(item),
        headers: {
          "Content-type": "application/json; charset=UTF-8"
        }
      })
      .then((response) => response.json())
      .then((json) => console.log(json));
    }

    // Remove the dummy data
    remove(1)
  }
}

// Defining async function
async function get_api(url) {
  // Storing response
  const response = await fetch(url);

  // Storing data in form of JSON
  var data = await response.json();

  if (response) {
    hideloader();
  }

  //data = await initialise_data()
  show(data);
}

// Function to define innerHTML for HTML table
function show(data) {
  let element = "<div class='container'>"
  // Loop to access all rows
  for (let r of data) {
    element += `<div class='card'>`
    element += `<img src='${r.item_image}'>`
    element += `<p class="item-name">${r.item_name}</p>`;
    element += `<p class="item-price">$ ${r.item_price}</p>`;
    element += `<div item-id='${r.id}' class='cart-button'>Add to <i class="fa-solid fa-cart-shopping"></i></div>`;
    element += `</div>`;
    
  }

  element += "</div>"

  // Setting innerHTML as tab variable
  document.getElementById("api-data").innerHTML = element;
}

// Function to hide the loader
function hideloader() {
  document.getElementById('loading').style.display = 'none';
}

function show_single_item(item_id) {
  fetch(api_url + "/" + item_id, {
    method: "GET",
    headers: {
      "Content-type": "application/json; charset=UTF-8"
    }
  })
  .then(location.reload())
}



// Other API-related functions to manipulate data
// Adds an item JSON (with the same columns as the API)
function add(item) {
  fetch(api_url, {
    method: "POST",
    body: JSON.stringify(item),
    headers: {
      "Content-type": "application/json; charset=UTF-8"
    }
  })
  .then((response) => response.json())
  .then((json) => console.log(json));
}

function update(item_id) {
  fetch(api_url + "/" + item_id, {
    method: "PUT",
    body: JSON.stringify([{
      id: item_id,
      // TODO: REPLACE THIS ACCORDING TO THE COLUMNS YOU WANT TO CHANGE
      name: "John Smith",
      address: "Updated location"
    }
                         ]),
    headers: {
      "Content-type": "application/json; charset=UTF-8"
    }
  })
    .then((response) => response.json())
    .then((json) => console.log(json));
}


function remove(item_id) {
  return fetch(api_url + "/" + item_id, {
    method: "DELETE",
    headers: {
      "Content-type": "application/json; charset=UTF-8"
    }
  })
}

function filter() {
  // TODO: REPLACE ?name=Sharlene Aery with the parameters of your filter
  // Example: ?id=3
  fetch(api_url + "?name=Sharlene Aery", {
    method: "GET",
    headers: {
      "Content-type": "application/json; charset=UTF-8"
    }
  })
    .then((response) => response.json())
    .then((json) => show(json));
}
